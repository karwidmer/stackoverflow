2020-04-03 09:58:02.947 [apm-server-healthcheck] INFO co.elastic.apm.agent.report.ApmServerHealthChecker - Elastic APM server is available: {  "build_date": "2019-07-24T17:14:07Z",  "build_sha": "a6b6ca2f36a7b3fd3dfe74840fed0ef9d67cb046",  "version": "7.3.0"}
2020-04-03 09:58:03.145 [main] INFO co.elastic.apm.agent.configuration.StartupInfo - Starting Elastic APM 1.6.1 as phoenix-batch-pp1 on Java 1.8.0_242 (Oracle Corporation) Linux 3.10.0-1062.12.1.el7.x86_64
09:58:05.202 [main] DEBUG com.landg.phoenix.paymentraise.worker.WorkerApplication - WorkerApplication : HERE WE GO WITH SPRING BOOT WORKER
2020-04-03 09:58:09.719  INFO 15495 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
LOGBACK: No context given for c.q.l.core.rolling.SizeAndTimeBasedRollingPolicy@594427726

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v2.2.1.RELEASE)

2020-04-03 09:58:10 - Could not locate PropertySource: None of labels [] found
2020-04-03 09:58:10 - The following profiles are active: partitionworker
2020-04-03 09:58:13 - BeanFactory id=3ed3c5b0-4938-3857-81b9-a07eba941ee0
2020-04-03 09:58:13 - No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.
2020-04-03 09:58:13 - No bean named 'taskScheduler' has been explicitly defined. Therefore, a default ThreadPoolTaskScheduler will be created.
2020-04-03 09:58:13 - No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created.
2020-04-03 09:58:13 - Bean 'integrationChannelResolver' of type [org.springframework.integration.support.channel.BeanFactoryChannelResolver] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 09:58:13 - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 09:58:14 - Bean 'integrationDisposableAutoCreatedBeans' of type [org.springframework.integration.config.annotation.Disposables] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 09:58:15 - Bean 'org.springframework.integration.config.IntegrationManagementConfiguration' of type [org.springframework.integration.config.IntegrationManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 09:58:15 - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 09:58:18 - PartitionWorker : inboundFlow
2020-04-03 09:58:18 - PartitionWorker : paymentRaiseWorkerStep
2020-04-03 09:58:18 - HikariPool-1 - Starting...
2020-04-03 09:58:24 - HikariPool-1 - Start completed.
2020-04-03 09:58:25 - No database type set, using meta data indicating: POSTGRES
2020-04-03 09:58:25 - No TaskExecutor has been set, defaulting to synchronous executor.
2020-04-03 09:58:27 - Initializing ExecutorService 'taskScheduler'
2020-04-03 09:58:28 - Adding {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
2020-04-03 09:58:28 - Channel 'phoenix-paymentraise-batch-1.errorChannel' has 1 subscriber(s).
2020-04-03 09:58:28 - started bean '_org.springframework.integration.errorLogger'
2020-04-03 09:58:28 - Adding {bridge} as a subscriber to the 'inboundFlow.channel#0' channel
2020-04-03 09:58:28 - Channel 'phoenix-paymentraise-batch-1.inboundFlow.channel#0' has 1 subscriber(s).
2020-04-03 09:58:28 - started bean 'inboundFlow.org.springframework.integration.config.ConsumerEndpointFactoryBean#0'; defined in: 'class path resource [com/landg/phoenix/paymentraise/worker/batch/configuration/PartitionWorker.class]'; from source: 'bean method inboundFlow'
2020-04-03 09:58:28 - Adding {service-activator} as a subscriber to the 'consumePaymentRaiseMasterRequests' channel
2020-04-03 09:58:28 - Channel 'phoenix-paymentraise-batch-1.consumePaymentRaiseMasterRequests' has 1 subscriber(s).
2020-04-03 09:58:28 - started bean 'org.springframework.integration.dsl.StandardIntegrationFlow#0.org.springframework.integration.config.ConsumerEndpointFactoryBean#0'
2020-04-03 09:58:29 - started org.springframework.integration.jms.ChannelPublishingJmsMessageListener$GatewayDelegate@54afd745
2020-04-03 09:58:29 - started bean 'inboundFlow.jms:message-driven-channel-adapter#0'; defined in: 'class path resource [com/landg/phoenix/paymentraise/worker/batch/configuration/PartitionWorker.class]'; from source: 'bean method inboundFlow'
2020-04-03 09:58:29 - Started WorkerApplication in 24.048 seconds (JVM running for 27.159)
2020-04-03 09:58:29 - Running default command line with: [--spring.profiles.active=partitionworker, --phoenix.landg.timetraveldate=2020-10-28, --phoenix.queue.master2worker=PR-TEMP-REQ20201028, --spring.cloud.task.executionid=2663]
2020-04-03 09:58:31 - Overriding default instance of MessageHandlerMethodFactory with provided one.
----------------------------------------------------------------------------------------------------------------
2020-04-03 09:58:31 - PartitionWorker : taskletProcessing :  minValue 622042 : maxValue 624542
2020-04-03 09:58:31 - PartitionWorker : taskletProcessing :  propertiesConfig.getTimeTravelDate() 2020-10-28 : propertiesConfig.getLeadTime() 4
2020-04-03 09:58:31 - PartitionWorker : taskletProcessing :  LETS READ
2020-04-03 09:58:31 - PaymentRaiseReaderTasklet : execute : TimeTravelDate=2020-10-28 : LeadTime=4 : minValue=622042 : maxValue=624542
2020-04-03 09:58:31 - PaymentRaiseReaderTasklet : execute : SQL_PREMIUM_COMPONENT_QUERY : SELECT SUM (PREM_AMOUNT) AS PREM_SUM, POLICY, EFF_START_DATE, COLLECTN_DAY, BANK_DETAIL_UID, STATUS, LAST_PAYMENT_UID, NEXT_PREM_DUE_DATE, NEXT_PAYT_DUE_DATE, PREM_FREQUENCY FROM PHOENIX_PREMIUM.PREMIUM_COMPONENT WHERE LAST_PAYMENT_UID IS NOT NULL AND (LAST_PAYMENT_UID >= 622042 AND LAST_PAYMENT_UID <= 624542) AND (NEXT_PREM_DUE_DATE >= '2020-11-01' AND NEXT_PREM_DUE_DATE <= '2020-11-03') AND (NEXT_PREM_DUE_DATE >= EFF_START_DATE AND NEXT_PREM_DUE_DATE <= EFF_END_DATE) AND (STATUS IN ('01', '04', '05'))  AND POLICY IS NOT NULL GROUP BY EFF_START_DATE, POLICY, COLLECTN_DAY, BANK_DETAIL_UID, STATUS, LAST_PAYMENT_UID, NEXT_PREM_DUE_DATE, NEXT_PAYT_DUE_DATE, PREM_FREQUENCY ORDER BY LAST_PAYMENT_UID DESC
2020-04-03 09:58:31 - PremiumComponentRowMapper : mapRow : i 0
..................................................
2020-04-03 09:58:32 - PremiumComponentRowMapper : mapRow : i 2500
2020-04-03 09:58:32 - Premium component row mapper PremiumComponent [premiumComponentUid=null, policyComponentUid=null, policy=SZMTZLB1K2, benefitType=null, bankDetailUid=11064, effectiveStartDate=2019-10-02, effectiveEndDate=null, currentTimeStamp=null, status=01, nextPaymentDueDate=2020-12-01, paymenyMechanism=null, premiumAmount=null, premiumFrequency=M, collectionDay=01, collectionMonth=null, commisionIndicator=null, reassuranceIndicator=null, iptIndicator=null, currency=null, lastPaymentUid=622042, nextPremiumDueDate=2020-11-02]
2020-04-03 09:58:32 - PaymentRaiseReaderTasklet : execute : premiumComponents.size() : 2501
----------------------------------------------------------------------------------------------------------------
2020-04-03 09:58:32 - PartitionWorker : taskletProcessing :  LETS PROCESS
2020-04-03 09:58:32 - PaymentRaiseProcessorTasklet : execute : premiumComponents.size() : 2501
2020-04-03 09:58:32 - PaymentRaiseProcessor : process : item.getPolicy() FSKIPH53RN
2020-04-03 09:58:32 - PaymentDetailService : checkExistingPaymentDetail : item.getPolicy() : FSKIPH53RN
2020-04-03 09:58:32 - PaymentDetailService : getPaymentDetail : item.getPolicy() FSKIPH53RN
2020-04-03 09:58:32 - PaymentDetailService : getPaymentDetail : Payment detail table read query to check existing record SELECT * FROM PHOENIX_PAYMENT.PAYMENT_DETAIL where PAYMENT_DETAIL_UID = '624542'
2020-04-03 09:58:32 - Payment details mapper PaymentDetail [paymentDetailUid=624542, policy=FSKIPH53RN, bankDetailUid=9114, currentTimeStamp=2020-09-28 09:15:43.895, paymentReference=FSKIPH53RN-201102 , origPaymentSource=DD, policyMonthYear=2020-10-02, status=01, paymentAmount=6.83, paymentDueDate=2020-11-01, origCollectionDate=2020-11-02, actualCollection=null, actualPaymentSource=null, currency=GBP, bacsCode=17, commissionProcessedIndicator=null]
2020-04-03 09:58:32 - Policy table select query to verify policy status select * from PHOENIX_POLICY.POLICY where POLICY ='FSKIPH53RN' and STATUS in ('00', '01', '02')
2020-04-03 09:58:32 - Policy mapper Policy [policyComponentUid=null, policyNumber=FSKIPH53RN, effectiveStartDate=2019-10-02, effectiveEndDate=2024-10-01, currentTimestamp=2019-10-02 10:48:52.993, status=01  ]
2020-04-03 09:58:32 - *** PaymentRaiseProcessor : process : Inside payment raise processor, PremiumComponent: PremiumComponent [premiumComponentUid=null, policyComponentUid=null, policy=FSKIPH53RN, benefitType=null, bankDetailUid=9114, effectiveStartDate=2019-10-02, effectiveEndDate=null, currentTimeStamp=null, status=01, nextPaymentDueDate=2020-12-01, paymenyMechanism=null, premiumAmount=null, premiumFrequency=M, collectionDay=01, collectionMonth=null, commisionIndicator=null, reassuranceIndicator=null, iptIndicator=null, currency=null, lastPaymentUid=624542, nextPremiumDueDate=2020-11-02] ***
2020-04-03 09:58:32 - PaymentDetailService : checkIfFinalPayment : Inside paymentdetail service : check final payment details
2020-04-03 09:58:32 - PaymentDetailService : checkIfFinalPayment : policy final prem due date 2024-09-02 :
2020-04-03 09:58:32 - PaymentDetailService : checkIfFinalPayment : prem component next pre due date 2020-11-02
2020-04-03 09:58:32 - PaymentRaiseProcessor : process : Processed premium due (PREM_DUE_DATE) date 2020-11-02
2020-04-03 09:58:32 - Payment due date after process 2020-12-01
2020-04-03 09:58:32 - PaymentRaiseProcessor : process : Premium payment date (PREM_PAYMENT_DATE) after process 2020-12-01
2020-04-03 09:58:32 - Next premium date and effective start date is same 2020-12-02
2020-04-03 09:58:32 - PaymentRaiseProcessor : process : Processed next premium due date (NEXT_PREM_DUE_DATE)  2020-12-02
2020-04-03 09:58:32 - Payment due date after process 2022-01-01
2020-04-03 09:58:32 - PaymentRaiseProcessor : process : Before process next prem due date 2020-11-02
2020-04-03 09:58:32 - PaymentRaiseProcessor : process : Before process final prem due date 2024-09-02
2020-04-03 09:58:32 - PaymentRaiseProcessor : process : Bacs code update to 17
2020-04-03 09:58:32 - PaymentRaiseProcessor : process : Processed next premium due date (NEXT_PREM_DUE_DATE)  2020-12-02
2020-04-03 09:58:32 - PaymentRaiseProcessor : process : Next payment due date (NEXT_PAYT_DUE_DATE) after process 2022-01-04
2020-04-03 09:58:32 - PaymentRaiseProcessor : paymentRaiseWdhFeed : premiumComponent.getPolicy() : FSKIPH53RN
2020-04-03 09:58:32 - PaymentRaiseProcessor : paymentRaiseWdhFeed : premiumComponent.getPolicy() : FSKIPH53RN
2020-04-03 09:58:32 - PaymentRaiseProcessor : paymentRaiseWdhFeed : Payment raise WDH feed diary event: DiaryEvent(diaryUid=null, policy=FSKIPH53RN, diaryType=RADATAFEEDUP, diaryTimestamp=2020-04-03 09:58:32.669, createdTimestamp=2020-04-03 09:58:32.669, diarySource=RAISEPAYMENT, diaryData={"policy":"FSKIPH53RN","updatedIndicator":"Y","nextPremiumDue":1606867200000,"dateNextDirectDebit":1641254400000,"outstandingMoneyDue":6.83,"currPrem":6.83}, status=00)
..................................................
----------------------------------------------------------------------------------------------------------------
2020-04-03 10:12:09 - PartitionWorker : taskletProcessing :  LETS WRITE
2020-04-03 10:12:09 - PaymentRaiseWriterTasklet : execute
2020-04-03 10:12:09 - PaymentRaiseWriterTasklet : writePremiumDetail
2020-04-03 10:12:09 - PaymentRaiseWriterTasklet : writePremiumDetail : Executed paymentDetail writer PaymentDetail [paymentDetailUid=624542, policy=FSKIPH53RN, bankDetailUid=9114, currentTimeStamp=2020-10-28 09:58:32.662, paymentReference=FSKIPH53RN-201201, origPaymentSource=DD, policyMonthYear=2020-11-02, status=01, paymentAmount=6.83, paymentDueDate=2020-12-01, origCollectionDate=2020-12-01, actualCollection=null, actualPaymentSource=null, currency=GBP, bacsCode=17, commissionProcessedIndicator=N], generated key 626426
2020-04-03 10:12:09 - MQ sent to PTT-TRIGGER-QUEUE-NFT-PR
2020-04-03 10:12:09 - MQ sent to msg {"transactionType":"PD","collectionType":"DD","raisedDate":1603879112662,"dueDate":1604275200000,"collectionDate":1606780800000,"policy":"FSKIPH53RN","paymentReference":"FSKIPH53RN-201201","commissionType":null,"paymentAmount":6.83,"agentNumber":null,"paymentMonths":null}
2020-04-03 10:12:09 - PaymentRaiseWriterTasklet : writePremiumDetail : Data send to MQ{"transactionType":"PD","collectionType":"DD","raisedDate":1603879112662,"dueDate":1604275200000,"collectionDate":1606780800000,"policy":"FSKIPH53RN","paymentReference":"FSKIPH53RN-201201","commissionType":null,"paymentAmount":6.83,"agentNumber":null,"paymentMonths":null}
2020-04-03 10:12:09 - PaymentRaiseWriterTasklet : writePremiumComponent 
2020-04-03 10:12:09 - PaymentRaiseWriterTasklet : writePremiumComponent : lastPaymentUid 626426
2020-04-03 10:12:10 - PaymentRaiseWriterTasklet : writeDiaryEvent
2020-04-03 10:12:10 - PaymentRaiseWriterTasklet : writePremiumDetail
2020-04-03 10:12:10 - PaymentRaiseWriterTasklet : writePremiumDetail : Executed paymentDetail writer PaymentDetail [paymentDetailUid=624541, policy=U6X4CZLHU1, bankDetailUid=8469, currentTimeStamp=2020-10-28 09:58:33.056, paymentReference=U6X4CZLHU1-201201, origPaymentSource=DD, policyMonthYear=2020-11-02, status=01, paymentAmount=6.83, paymentDueDate=2020-12-01, origCollectionDate=2020-12-01, actualCollection=null, actualPaymentSource=null, currency=GBP, bacsCode=17, commissionProcessedIndicator=N], generated key 626427
2020-04-03 10:12:10 - MQ sent to PTT-TRIGGER-QUEUE-NFT-PR
2020-04-03 10:12:10 - MQ sent to msg {"transactionType":"PD","collectionType":"DD","raisedDate":1603879113056,"dueDate":1604275200000,"collectionDate":1606780800000,"policy":"U6X4CZLHU1","paymentReference":"U6X4CZLHU1-201201","commissionType":null,"paymentAmount":6.83,"agentNumber":null,"paymentMonths":null}
..................................................
2020-04-03 10:17:56 - PaymentRaiseWriterTasklet : writePremiumComponent 
2020-04-03 10:17:56 - PaymentRaiseWriterTasklet : writePremiumComponent : lastPaymentUid 628925
2020-04-03 10:17:56 - PaymentRaiseWriterTasklet : writeDiaryEvent
2020-04-03 10:17:56 - PaymentRaiseWriterTasklet : writePremiumDetail
2020-04-03 10:17:56 - PaymentRaiseWriterTasklet : writePremiumDetail : Executed paymentDetail writer PaymentDetail [paymentDetailUid=622042, policy=SZMTZLB1K2, bankDetailUid=11064, currentTimeStamp=2020-10-28 10:12:09.87, paymentReference=SZMTZLB1K2-201201, origPaymentSource=DD, policyMonthYear=2020-11-02, status=01, paymentAmount=6.83, paymentDueDate=2020-12-01, origCollectionDate=2020-12-01, actualCollection=null, actualPaymentSource=null, currency=GBP, bacsCode=17, commissionProcessedIndicator=N], generated key 628926
2020-04-03 10:17:56 - MQ sent to PTT-TRIGGER-QUEUE-NFT-PR
2020-04-03 10:17:56 - MQ sent to msg {"transactionType":"PD","collectionType":"DD","raisedDate":1603879929870,"dueDate":1604275200000,"collectionDate":1606780800000,"policy":"SZMTZLB1K2","paymentReference":"SZMTZLB1K2-201201","commissionType":null,"paymentAmount":6.83,"agentNumber":null,"paymentMonths":null}
2020-04-03 10:17:56 - PaymentRaiseWriterTasklet : writePremiumDetail : Data send to MQ{"transactionType":"PD","collectionType":"DD","raisedDate":1603879929870,"dueDate":1604275200000,"collectionDate":1606780800000,"policy":"SZMTZLB1K2","paymentReference":"SZMTZLB1K2-201201","commissionType":null,"paymentAmount":6.83,"agentNumber":null,"paymentMonths":null}
2020-04-03 10:17:56 - PaymentRaiseWriterTasklet : writePremiumComponent 
2020-04-03 10:17:56 - PaymentRaiseWriterTasklet : writePremiumComponent : lastPaymentUid 628926
2020-04-03 10:17:56 - PaymentRaiseWriterTasklet : writeDiaryEvent
2020-04-03 10:17:56 - PaymentRaiseWriterTasklet : execute : FINISHED
----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------
2020-04-03 10:17:56 - Previously reported leaked connection org.postgresql.jdbc.PgConnection@57fd91c9 on thread inboundFlow.org.springframework.jms.listener.DefaultMessageListenerContainer#0-1 was returned to the pool (unleaked)
2020-04-03 10:17:56 - Step: [paymentRaiseWorkerStep:partition1] executed in 19m25s503ms
2020-04-03 10:17:56 - PartitionWorker : taskletProcessing :  minValue 624542 : maxValue 626425
2020-04-03 10:17:56 - PartitionWorker : taskletProcessing :  propertiesConfig.getTimeTravelDate() 2020-10-28 : propertiesConfig.getLeadTime() 4
2020-04-03 10:17:56 - PartitionWorker : taskletProcessing :  LETS READ
2020-04-03 10:17:56 - PaymentRaiseReaderTasklet : execute : TimeTravelDate=2020-10-28 : LeadTime=4 : minValue=624542 : maxValue=626425
2020-04-03 10:17:56 - PaymentRaiseReaderTasklet : execute : SQL_PREMIUM_COMPONENT_QUERY : SELECT SUM (PREM_AMOUNT) AS PREM_SUM, POLICY, EFF_START_DATE, COLLECTN_DAY, BANK_DETAIL_UID, STATUS, LAST_PAYMENT_UID, NEXT_PREM_DUE_DATE, NEXT_PAYT_DUE_DATE, PREM_FREQUENCY FROM PHOENIX_PREMIUM.PREMIUM_COMPONENT WHERE LAST_PAYMENT_UID IS NOT NULL AND (LAST_PAYMENT_UID >= 624542 AND LAST_PAYMENT_UID <= 626425) AND (NEXT_PREM_DUE_DATE >= '2020-11-01' AND NEXT_PREM_DUE_DATE <= '2020-11-03') AND (NEXT_PREM_DUE_DATE >= EFF_START_DATE AND NEXT_PREM_DUE_DATE <= EFF_END_DATE) AND (STATUS IN ('01', '04', '05'))  AND POLICY IS NOT NULL GROUP BY EFF_START_DATE, POLICY, COLLECTN_DAY, BANK_DETAIL_UID, STATUS, LAST_PAYMENT_UID, NEXT_PREM_DUE_DATE, NEXT_PAYT_DUE_DATE, PREM_FREQUENCY ORDER BY LAST_PAYMENT_UID DESC
2020-04-03 10:17:57 - PremiumComponentRowMapper : mapRow : i 0
2020-04-03 10:17:57 - Premium component row mapper PremiumComponent [premiumComponentUid=null, policyComponentUid=null, policy=IMQAKSF6J3, benefitType=null, bankDetailUid=6763, effectiveStartDate=2019-10-02, effectiveEndDate=null, currentTimeStamp=null, status=01, nextPaymentDueDate=2020-12-01, paymenyMechanism=null, premiumAmount=null, premiumFrequency=M, collectionDay=01, collectionMonth=null, commisionIndicator=null, reassuranceIndicator=null, iptIndicator=null, currency=null, lastPaymentUid=626425, nextPremiumDueDate=2020-11-02]
..................................................
2020-04-03 10:17:57 - Premium component row mapper PremiumComponent [premiumComponentUid=null, policyComponentUid=null, policy=YTKQYVN78O, benefitType=null, bankDetailUid=8887, effectiveStartDate=2019-10-02, effectiveEndDate=null, currentTimeStamp=null, status=01, nextPaymentDueDate=2020-12-01, paymenyMechanism=null, premiumAmount=null, premiumFrequency=M, collectionDay=01, collectionMonth=null, commisionIndicator=null, reassuranceIndicator=null, iptIndicator=null, currency=null, lastPaymentUid=624543, nextPremiumDueDate=2020-11-02]
2020-04-03 10:17:57 - PaymentRaiseReaderTasklet : execute : premiumComponents.size() : 1883
----------------------------------------------------------------------------------------------------------------
2020-04-03 10:17:57 - PartitionWorker : taskletProcessing :  LETS PROCESS
2020-04-03 10:17:57 - PaymentRaiseProcessorTasklet : execute : premiumComponents.size() : 1883
2020-04-03 10:17:57 - PaymentRaiseProcessor : process : item.getPolicy() IMQAKSF6J3
2020-04-03 10:17:57 - PaymentDetailService : checkExistingPaymentDetail : item.getPolicy() : IMQAKSF6J3
2020-04-03 10:17:57 - PaymentDetailService : getPaymentDetail : item.getPolicy() IMQAKSF6J3
2020-04-03 10:17:57 - PaymentDetailService : getPaymentDetail : Payment detail table read query to check existing record SELECT * FROM PHOENIX_PAYMENT.PAYMENT_DETAIL where PAYMENT_DETAIL_UID = '626425'
2020-04-03 10:17:57 - Payment details mapper PaymentDetail [paymentDetailUid=626425, policy=IMQAKSF6J3, bankDetailUid=6763, currentTimeStamp=2020-09-28 09:25:33.576, paymentReference=IMQAKSF6J3-201102 , origPaymentSource=DD, policyMonthYear=2020-10-02, status=01, paymentAmount=6.83, paymentDueDate=2020-11-01, origCollectionDate=2020-11-02, actualCollection=null, actualPaymentSource=null, currency=GBP, bacsCode=17, commissionProcessedIndicator=null]
2020-04-03 10:17:57 - Policy table select query to verify policy status select * from PHOENIX_POLICY.POLICY where POLICY ='IMQAKSF6J3' and STATUS in ('00', '01', '02')
2020-04-03 10:17:57 - Policy mapper Policy [policyComponentUid=null, policyNumber=IMQAKSF6J3, effectiveStartDate=2019-10-02, effectiveEndDate=2024-10-01, currentTimestamp=2019-10-02 09:36:54.79, status=01  ]
2020-04-03 10:17:57 - *** PaymentRaiseProcessor : process : Inside payment raise processor, PremiumComponent: PremiumComponent [premiumComponentUid=null, policyComponentUid=null, policy=IMQAKSF6J3, benefitType=null, bankDetailUid=6763, effectiveStartDate=2019-10-02, effectiveEndDate=null, currentTimeStamp=null, status=01, nextPaymentDueDate=2020-12-01, paymenyMechanism=null, premiumAmount=null, premiumFrequency=M, collectionDay=01, collectionMonth=null, commisionIndicator=null, reassuranceIndicator=null, iptIndicator=null, currency=null, lastPaymentUid=626425, nextPremiumDueDate=2020-11-02] ***
2020-04-03 10:17:57 - PaymentDetailService : checkIfFinalPayment : Inside paymentdetail service : check final payment details
2020-04-03 10:17:57 - PaymentDetailService : checkIfFinalPayment : policy final prem due date 2024-09-02 :
2020-04-03 10:17:57 - PaymentDetailService : checkIfFinalPayment : prem component next pre due date 2020-11-02
2020-04-03 10:17:57 - PaymentRaiseProcessor : process : Processed premium due (PREM_DUE_DATE) date 2020-11-02
2020-04-03 10:17:57 - Payment due date after process 2020-12-01
2020-04-03 10:17:57 - PaymentRaiseProcessor : process : Premium payment date (PREM_PAYMENT_DATE) after process 2020-12-01
2020-04-03 10:17:57 - Next premium date and effective start date is same 2020-12-02
2020-04-03 10:17:57 - PaymentRaiseProcessor : process : Processed next premium due date (NEXT_PREM_DUE_DATE)  2020-12-02
2020-04-03 10:17:57 - Payment due date after process 2022-01-01
2020-04-03 10:17:57 - PaymentRaiseProcessor : process : Before process next prem due date 2020-11-02
2020-04-03 10:17:57 - PaymentRaiseProcessor : process : Before process final prem due date 2024-09-02
2020-04-03 10:17:57 - PaymentRaiseProcessor : process : Bacs code update to 17
2020-04-03 10:17:57 - PaymentRaiseProcessor : process : Processed next premium due date (NEXT_PREM_DUE_DATE)  2020-12-02
2020-04-03 10:17:57 - PaymentRaiseProcessor : process : Next payment due date (NEXT_PAYT_DUE_DATE) after process 2022-01-04
2020-04-03 10:17:57 - PaymentRaiseProcessor : paymentRaiseWdhFeed : premiumComponent.getPolicy() : IMQAKSF6J3
2020-04-03 10:17:57 - PaymentRaiseProcessor : paymentRaiseWdhFeed : premiumComponent.getPolicy() : IMQAKSF6J3
2020-04-03 10:17:57 - PaymentRaiseProcessor : paymentRaiseWdhFeed : Payment raise WDH feed diary event: DiaryEvent(diaryUid=null, policy=IMQAKSF6J3, diaryType=RADATAFEEDUP, diaryTimestamp=2020-04-03 10:17:57.524, createdTimestamp=2020-04-03 10:17:57.524, diarySource=RAISEPAYMENT, diaryData={"policy":"IMQAKSF6J3","updatedIndicator":"Y","nextPremiumDue":1606867200000,"dateNextDirectDebit":1641254400000,"outstandingMoneyDue":6.83,"currPrem":6.83}, status=00)
2020-04-03 10:17:57 - PaymentRaiseProcessor : process : item.getPolicy() CVCUXLJZY1
2020-04-03 10:17:57 - PaymentDetailService : checkExistingPaymentDetail : item.getPolicy() : CVCUXLJZY1
2020-04-03 10:17:57 - PaymentDetailService : getPaymentDetail : item.getPolicy() CVCUXLJZY1
2020-04-03 10:17:57 - PaymentDetailService : getPaymentDetail : Payment detail table read query to check existing record SELECT * FROM PHOENIX_PAYMENT.PAYMENT_DETAIL where PAYMENT_DETAIL_UID = '626424'
2020-04-03 10:17:57 - Payment details mapper PaymentDetail [paymentDetailUid=626424, policy=CVCUXLJZY1, bankDetailUid=6764, currentTimeStamp=2020-09-28 09:25:33.333, paymentReference=CVCUXLJZY1-201102 , origPaymentSource=DD, policyMonthYear=2020-10-02, status=01, paymentAmount=6.83, paymentDueDate=2020-11-01, origCollectionDate=2020-11-02, actualCollection=null, actualPaymentSource=null, currency=GBP, bacsCode=17, commissionProcessedIndicator=null]
2020-04-03 10:17:57 - Policy table select query to verify policy status select * from PHOENIX_POLICY.POLICY where POLICY ='CVCUXLJZY1' and STATUS in ('00', '01', '02')
2020-04-03 10:17:57 - Policy mapper Policy [policyComponentUid=null, policyNumber=CVCUXLJZY1, effectiveStartDate=2019-10-02, effectiveEndDate=2024-10-01, currentTimestamp=2019-10-02 09:37:01.81, status=01  ]
2020-04-03 10:17:57 - *** PaymentRaiseProcessor : process : Inside payment raise processor, PremiumComponent: PremiumComponent [premiumComponentUid=null, policyComponentUid=null, policy=CVCUXLJZY1, benefitType=null, bankDetailUid=6764, effectiveStartDate=2019-10-02, effectiveEndDate=null, currentTimeStamp=null, status=01, nextPaymentDueDate=2020-12-01, paymenyMechanism=null, premiumAmount=null, premiumFrequency=M, collectionDay=01, collectionMonth=null, commisionIndicator=null, reassuranceIndicator=null, iptIndicator=null, currency=null, lastPaymentUid=626424, nextPremiumDueDate=2020-11-02] ***
................................................................
2020-04-03 10:18:56 - PaymentRaiseProcessor : process : item.getPolicy() EU9M0MWR4M
2020-04-03 10:18:56 - PaymentDetailService : checkExistingPaymentDetail : item.getPolicy() : EU9M0MWR4M
2020-04-03 10:18:56 - PaymentDetailService : getPaymentDetail : item.getPolicy() EU9M0MWR4M
2020-04-03 10:18:56 - PaymentDetailService : getPaymentDetail : Payment detail table read query to check existing record SELECT * FROM PHOENIX_PAYMENT.PAYMENT_DETAIL where PAYMENT_DETAIL_UID = '626240'
2020-04-03 10:18:56 - Payment details mapper PaymentDetail [paymentDetailUid=626240, policy=EU9M0MWR4M, bankDetailUid=6830, currentTimeStamp=2020-09-28 09:24:34.557, paymentReference=EU9M0MWR4M-201102 , origPaymentSource=DD, policyMonthYear=2020-10-02, status=01, paymentAmount=6.83, paymentDueDate=2020-11-01, origCollectionDate=2020-11-02, actualCollection=null, actualPaymentSource=null, currency=GBP, bacsCode=17, commissionProcessedIndicator=null]
2020-04-03 10:18:56 - Policy table select query to verify policy status select * from PHOENIX_POLICY.POLICY where POLICY ='EU9M0MWR4M' and STATUS in ('00', '01', '02')
2020-04-03 10:18:56 - Policy mapper Policy [policyComponentUid=null, policyNumber=EU9M0MWR4M, effectiveStartDate=2019-10-02, effectiveEndDate=2024-10-01, currentTimestamp=2019-10-02 10:03:21.39, status=01  ]
2020-04-03 10:18:56 - *** PaymentRaiseProcessor : process : Inside payment raise processor, PremiumComponent: PremiumComponent [premiumComponentUid=null, policyComponentUid=null, policy=EU9M0MWR4M, benefitType=null, bankDetailUid=6830, effectiveStartDate=2019-10-02, effectiveEndDate=null, currentTimeStamp=null, status=01, nextPaymentDueDate=2020-12-01, paymenyMechanism=null, premiumAmount=null, premiumFrequency=M, collectionDay=01, collectionMonth=null, commisionIndicator=null, reassuranceIndicator=null, iptIndicator=null, currency=null, lastPaymentUid=626240, nextPremiumDueDate=2020-11-02] ***
2020-04-03 10:18:56 - PaymentDetailService : checkIfFinalPayment : Inside paymentdetail service : check final payment details
2020-04-03 10:18:56 - PaymentDetailService : checkIfFinalPayment : policy final prem due date 2024-09-02 :
2020-04-03 10:18:56 - PaymentDetailService : checkIfFinalPayment : prem component next pre due date 2020-11-02
2020-04-03 10:18:56 - PaymentRaiseProcessor : process : Processed premium due (PREM_DUE_DATE) date 2020-11-02
2020-04-03 10:18:56 - Payment due date after process 2020-12-01
2020-04-03 10:18:56 - PaymentRaiseProcessor : process : Premium payment date (PREM_PAYMENT_DATE) after process 2020-12-01
2020-04-03 10:18:56 - Next premium date and effective start date is same 2020-12-02
2020-04-03 10:18:56 - PaymentRaiseProcessor : process : Processed next premium due date (NEXT_PREM_DUE_DATE)  2020-12-02
2020-04-03 10:18:56 - Payment due date after process 2022-01-01
2020-04-03 10:18:56 - PaymentRaiseProcessor : process : Before process next prem due date 2020-11-02
2020-04-03 10:18:56 - PaymentRaiseProcessor : process : Before process final prem due date 2024-09-02
2020-04-03 10:18:56 - PaymentRaiseProcessor : process : Bacs code update to 17
2020-04-03 10:18:56 - PaymentRaiseProcessor : process : Processed next premium due date (NEXT_PREM_DUE_DATE)  2020-12-02
2020-04-03 10:18:56 - PaymentRaiseProcessor : process : Next payment due date (NEXT_PAYT_DUE_DATE) after process 2022-01-04
2020-04-03 10:18:56 - PaymentRaiseProcessor : paymentRaiseWdhFeed : premiumComponent.getPolicy() : EU9M0MWR4M
2020-04-03 10:18:56 - PaymentRaiseProcessor : paymentRaiseWdhFeed : premiumComponent.getPolicy() : EU9M0MWR4M
2020-04-03 10:18:56 - PaymentRaiseProcessor : paymentRaiseWdhFeed : Payment raise WDH feed diary event: DiaryEvent(diaryUid=null, policy=EU9M0MWR4M, diaryType=RADATAFEEDUP, diaryTimestamp=2020-04-03 10:18:56.92, createdTimestamp=2020-04-03 10:18:56.92, diarySource=RAISEPAYMENT, diaryData={"policy":"EU9M0MWR4M","updatedIndicator":"Y","nextPremiumDue":1606867200000,"dateNextDirectDebit":1641254400000,"outstandingMoneyDue":6.83,"currPrem":6.83}, status=00)
2020-04-03 10:18:56 - PaymentRaiseProcessor : process : item.getPolicy() 9FFA81ISQB
2020-04-03 10:18:56 - PaymentDetailService : checkExistingPaymentDetail : item.getPolicy() : 9FFA81ISQB
2020-04-03 10:18:56 - PaymentDetailService : getPaymentDetail : item.getPolicy() 9FFA81ISQB
2020-04-03 10:18:56 - PaymentDetailService : getPaymentDetail : Payment detail table read query to check existing record SELECT * FROM PHOENIX_PAYMENT.PAYMENT_DETAIL where PAYMENT_DETAIL_UID = '626239'
2020-04-03 10:18:56 - Connection leak detection triggered for org.postgresql.jdbc.PgConnection@77fc4a89 on thread inboundFlow.org.springframework.jms.listener.DefaultMessageListenerContainer#0-1, stack trace follows
java.lang.Exception: Apparent connection leak detected
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:128) ~[HikariCP-3.4.1.jar!/:na]
	at com.zaxxer.hikari.HikariDataSource$$FastClassBySpringCGLIB$$eeb1ae86.invoke(<generated>) ~[HikariCP-3.4.1.jar!/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769) ~[spring-aop-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136) ~[spring-aop-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124) ~[spring-aop-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) ~[spring-aop-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at com.zaxxer.hikari.HikariDataSource$$EnhancerBySpringCGLIB$$3449ec0d.getConnection(<generated>) ~[HikariCP-3.4.1.jar!/:na]
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:263) ~[spring-jdbc-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:376) ~[spring-tx-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_242]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127) ~[spring-batch-core-4.2.0.RELEASE.jar!/:4.2.0.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at com.sun.proxy.$Proxy76.getTransaction(Unknown Source) ~[na:na]
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:137) ~[spring-tx-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273) ~[spring-batch-core-4.2.0.RELEASE.jar!/:4.2.0.RELEASE]
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82) ~[spring-batch-core-4.2.0.RELEASE.jar!/:4.2.0.RELEASE]
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375) ~[spring-batch-infrastructure-4.2.0.RELEASE.jar!/:4.2.0.RELEASE]
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215) ~[spring-batch-infrastructure-4.2.0.RELEASE.jar!/:4.2.0.RELEASE]
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145) ~[spring-batch-infrastructure-4.2.0.RELEASE.jar!/:4.2.0.RELEASE]
	at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:258) ~[spring-batch-core-4.2.0.RELEASE.jar!/:4.2.0.RELEASE]
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:208) ~[spring-batch-core-4.2.0.RELEASE.jar!/:4.2.0.RELEASE]
	at org.springframework.batch.integration.partition.StepExecutionRequestHandler.handle(StepExecutionRequestHandler.java:64) ~[spring-batch-integration-4.1.2.RELEASE.jar!/:4.1.2.RELEASE]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_242]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_242]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_242]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_242]
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:171) ~[spring-messaging-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:120) ~[spring-messaging-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.integration.handler.support.MessagingMethodInvokerHelper$HandlerMethod.invoke(MessagingMethodInvokerHelper.java:1097) ~[spring-integration-core-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.integration.handler.support.MessagingMethodInvokerHelper.invokeHandlerMethod(MessagingMethodInvokerHelper.java:581) ~[spring-integration-core-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.integration.handler.support.MessagingMethodInvokerHelper.processInternal(MessagingMethodInvokerHelper.java:477) ~[spring-integration-core-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.integration.handler.support.MessagingMethodInvokerHelper.process(MessagingMethodInvokerHelper.java:355) ~[spring-integration-core-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.integration.handler.MethodInvokingMessageProcessor.processMessage(MethodInvokingMessageProcessor.java:108) ~[spring-integration-core-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.integration.handler.ServiceActivatingHandler.handleRequestMessage(ServiceActivatingHandler.java:95) ~[spring-integration-core-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.integration.handler.AbstractReplyProducingMessageHandler.handleMessageInternal(AbstractReplyProducingMessageHandler.java:127) ~[spring-integration-core-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.integration.handler.AbstractMessageHandler.handleMessage(AbstractMessageHandler.java:170) ~[spring-integration-core-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.integration.dispatcher.AbstractDispatcher.tryOptimizedDispatch(AbstractDispatcher.java:115) ~[spring-integration-core-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.integration.dispatcher.UnicastingDispatcher.doDispatch(UnicastingDispatcher.java:133) ~[spring-integration-core-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.integration.dispatcher.UnicastingDispatcher.dispatch(UnicastingDispatcher.java:106) ~[spring-integration-core-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.integration.channel.AbstractSubscribableChannel.doSend(AbstractSubscribableChannel.java:73) ~[spring-integration-core-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.integration.channel.AbstractMessageChannel.send(AbstractMessageChannel.java:453) ~[spring-integration-core-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.integration.channel.AbstractMessageChannel.send(AbstractMessageChannel.java:403) ~[spring-integration-core-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.messaging.core.GenericMessagingTemplate.doSend(GenericMessagingTemplate.java:187) ~[spring-messaging-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.messaging.core.GenericMessagingTemplate.doSend(GenericMessagingTemplate.java:166) ~[spring-messaging-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.messaging.core.GenericMessagingTemplate.doSend(GenericMessagingTemplate.java:47) ~[spring-messaging-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.messaging.core.AbstractMessageSendingTemplate.send(AbstractMessageSendingTemplate.java:109) ~[spring-messaging-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.integration.handler.AbstractMessageProducingHandler.sendOutput(AbstractMessageProducingHandler.java:444) ~[spring-integration-core-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.integration.handler.AbstractMessageProducingHandler.doProduceOutput(AbstractMessageProducingHandler.java:318) ~[spring-integration-core-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.integration.handler.AbstractMessageProducingHandler.produceOutput(AbstractMessageProducingHandler.java:266) ~[spring-integration-core-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.integration.handler.AbstractMessageProducingHandler.sendOutputs(AbstractMessageProducingHandler.java:229) ~[spring-integration-core-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.integration.handler.AbstractReplyProducingMessageHandler.handleMessageInternal(AbstractReplyProducingMessageHandler.java:133) ~[spring-integration-core-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.integration.handler.AbstractMessageHandler.handleMessage(AbstractMessageHandler.java:170) ~[spring-integration-core-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.integration.dispatcher.AbstractDispatcher.tryOptimizedDispatch(AbstractDispatcher.java:115) ~[spring-integration-core-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.integration.dispatcher.UnicastingDispatcher.doDispatch(UnicastingDispatcher.java:133) ~[spring-integration-core-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.integration.dispatcher.UnicastingDispatcher.dispatch(UnicastingDispatcher.java:106) ~[spring-integration-core-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.integration.channel.AbstractSubscribableChannel.doSend(AbstractSubscribableChannel.java:73) ~[spring-integration-core-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.integration.channel.AbstractMessageChannel.send(AbstractMessageChannel.java:453) ~[spring-integration-core-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.messaging.core.GenericMessagingTemplate.doSend(GenericMessagingTemplate.java:187) ~[spring-messaging-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.messaging.core.GenericMessagingTemplate.doSend(GenericMessagingTemplate.java:166) ~[spring-messaging-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.messaging.core.GenericMessagingTemplate.doSend(GenericMessagingTemplate.java:47) ~[spring-messaging-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.messaging.core.AbstractMessageSendingTemplate.send(AbstractMessageSendingTemplate.java:109) ~[spring-messaging-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.messaging.core.AbstractMessageSendingTemplate.convertAndSend(AbstractMessageSendingTemplate.java:151) ~[spring-messaging-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.messaging.core.AbstractMessageSendingTemplate.convertAndSend(AbstractMessageSendingTemplate.java:143) ~[spring-messaging-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.integration.gateway.MessagingGatewaySupport.send(MessagingGatewaySupport.java:417) ~[spring-integration-core-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.integration.jms.ChannelPublishingJmsMessageListener$GatewayDelegate.send(ChannelPublishingJmsMessageListener.java:506) ~[spring-integration-jms-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.integration.jms.ChannelPublishingJmsMessageListener.onMessage(ChannelPublishingJmsMessageListener.java:341) ~[spring-integration-jms-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:736) ~[spring-jms-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:696) ~[spring-jms-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:674) ~[spring-jms-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:318) ~[spring-jms-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:257) ~[spring-jms-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1189) ~[spring-jms-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1179) ~[spring-jms-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:1076) ~[spring-jms-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_242]
2020-04-03 10:18:57 - Payment details mapper PaymentDetail [paymentDetailUid=626239, policy=9FFA81ISQB, bankDetailUid=7129, currentTimeStamp=2020-09-28 09:24:34.236, paymentReference=9FFA81ISQB-201102 , origPaymentSource=DD, policyMonthYear=2020-10-02, status=01, paymentAmount=6.83, paymentDueDate=2020-11-01, origCollectionDate=2020-11-02, actualCollection=null, actualPaymentSource=null, currency=GBP, bacsCode=17, commissionProcessedIndicator=null]
2020-04-03 10:18:57 - Policy table select query to verify policy status select * from PHOENIX_POLICY.POLICY where POLICY ='9FFA81ISQB' and STATUS in ('00', '01', '02')
2020-04-03 10:18:57 - Policy mapper Policy [policyComponentUid=null, policyNumber=9FFA81ISQB, effectiveStartDate=2019-10-02, effectiveEndDate=2024-10-01, currentTimestamp=2019-10-02 10:04:35.888, status=01  ]
2020-04-03 10:18:57 - *** PaymentRaiseProcessor : process : Inside payment raise processor, PremiumComponent: PremiumComponent [premiumComponentUid=null, policyComponentUid=null, policy=9FFA81ISQB, benefitType=null, bankDetailUid=7129, effectiveStartDate=2019-10-02, effectiveEndDate=null, currentTimeStamp=null, status=01, nextPaymentDueDate=2020-12-01, paymenyMechanism=null, premiumAmount=null, premiumFrequency=M, collectionDay=01, collectionMonth=null, commisionIndicator=null, reassuranceIndicator=null, iptIndicator=null, currency=null, lastPaymentUid=626239, nextPremiumDueDate=2020-11-02] ***
2020-04-03 10:18:57 - PaymentDetailService : checkIfFinalPayment : Inside paymentdetail service : check final payment details
2020-04-03 10:18:57 - PaymentDetailService : checkIfFinalPayment : policy final prem due date 2024-09-02 :
2020-04-03 10:18:57 - PaymentDetailService : checkIfFinalPayment : prem component next pre due date 2020-11-02
2020-04-03 10:18:57 - PaymentRaiseProcessor : process : Processed premium due (PREM_DUE_DATE) date 2020-11-02
2020-04-03 10:18:57 - Payment due date after process 2020-12-01
2020-04-03 10:18:57 - PaymentRaiseProcessor : process : Premium payment date (PREM_PAYMENT_DATE) after process 2020-12-01
2020-04-03 10:18:57 - Next premium date and effective start date is same 2020-12-02
2020-04-03 10:18:57 - PaymentRaiseProcessor : process : Processed next premium due date (NEXT_PREM_DUE_DATE)  2020-12-02
2020-04-03 10:18:57 - Payment due date after process 2022-01-01
2020-04-03 10:18:57 - PaymentRaiseProcessor : process : Before process next prem due date 2020-11-02
2020-04-03 10:18:57 - PaymentRaiseProcessor : process : Before process final prem due date 2024-09-02
2020-04-03 10:18:57 - PaymentRaiseProcessor : process : Bacs code update to 17
2020-04-03 10:18:57 - PaymentRaiseProcessor : process : Processed next premium due date (NEXT_PREM_DUE_DATE)  2020-12-02
2020-04-03 10:18:57 - PaymentRaiseProcessor : process : Next payment due date (NEXT_PAYT_DUE_DATE) after process 2022-01-04
2020-04-03 10:18:57 - PaymentRaiseProcessor : paymentRaiseWdhFeed : premiumComponent.getPolicy() : 9FFA81ISQB
2020-04-03 10:18:57 - PaymentRaiseProcessor : paymentRaiseWdhFeed : premiumComponent.getPolicy() : 9FFA81ISQB
2020-04-03 10:18:57 - PaymentRaiseProcessor : paymentRaiseWdhFeed : Payment raise WDH feed diary event: DiaryEvent(diaryUid=null, policy=9FFA81ISQB, diaryType=RADATAFEEDUP, diaryTimestamp=2020-04-03 10:18:57.186, createdTimestamp=2020-04-03 10:18:57.186, diarySource=RAISEPAYMENT, diaryData={"policy":"9FFA81ISQB","updatedIndicator":"Y","nextPremiumDue":1606867200000,"dateNextDirectDebit":1641254400000,"outstandingMoneyDue":6.83,"currPrem":6.83}, status=00)
...........................................................................................
2020-04-03 10:28:04 - PaymentRaiseProcessor : process : item.getPolicy() YTKQYVN78O
2020-04-03 10:28:04 - PaymentDetailService : checkExistingPaymentDetail : item.getPolicy() : YTKQYVN78O
2020-04-03 10:28:04 - PaymentDetailService : getPaymentDetail : item.getPolicy() YTKQYVN78O
2020-04-03 10:28:04 - PaymentDetailService : getPaymentDetail : Payment detail table read query to check existing record SELECT * FROM PHOENIX_PAYMENT.PAYMENT_DETAIL where PAYMENT_DETAIL_UID = '624543'
2020-04-03 10:28:04 - Payment details mapper PaymentDetail [paymentDetailUid=624543, policy=YTKQYVN78O, bankDetailUid=8887, currentTimeStamp=2020-09-28 09:15:44.251, paymentReference=YTKQYVN78O-201102 , origPaymentSource=DD, policyMonthYear=2020-10-02, status=01, paymentAmount=6.83, paymentDueDate=2020-11-01, origCollectionDate=2020-11-02, actualCollection=null, actualPaymentSource=null, currency=GBP, bacsCode=17, commissionProcessedIndicator=null]
2020-04-03 10:28:04 - Policy table select query to verify policy status select * from PHOENIX_POLICY.POLICY where POLICY ='YTKQYVN78O' and STATUS in ('00', '01', '02')
2020-04-03 10:28:04 - Policy mapper Policy [policyComponentUid=null, policyNumber=YTKQYVN78O, effectiveStartDate=2019-10-02, effectiveEndDate=2024-10-01, currentTimestamp=2019-10-02 10:48:09.258, status=01  ]
2020-04-03 10:28:04 - *** PaymentRaiseProcessor : process : Inside payment raise processor, PremiumComponent: PremiumComponent [premiumComponentUid=null, policyComponentUid=null, policy=YTKQYVN78O, benefitType=null, bankDetailUid=8887, effectiveStartDate=2019-10-02, effectiveEndDate=null, currentTimeStamp=null, status=01, nextPaymentDueDate=2020-12-01, paymenyMechanism=null, premiumAmount=null, premiumFrequency=M, collectionDay=01, collectionMonth=null, commisionIndicator=null, reassuranceIndicator=null, iptIndicator=null, currency=null, lastPaymentUid=624543, nextPremiumDueDate=2020-11-02] ***
2020-04-03 10:28:04 - PaymentDetailService : checkIfFinalPayment : Inside paymentdetail service : check final payment details
2020-04-03 10:28:04 - PaymentDetailService : checkIfFinalPayment : policy final prem due date 2024-09-02 :
2020-04-03 10:28:04 - PaymentDetailService : checkIfFinalPayment : prem component next pre due date 2020-11-02
2020-04-03 10:28:04 - PaymentRaiseProcessor : process : Processed premium due (PREM_DUE_DATE) date 2020-11-02
2020-04-03 10:28:04 - Payment due date after process 2020-12-01
2020-04-03 10:28:04 - PaymentRaiseProcessor : process : Premium payment date (PREM_PAYMENT_DATE) after process 2020-12-01
2020-04-03 10:28:04 - Next premium date and effective start date is same 2020-12-02
2020-04-03 10:28:04 - PaymentRaiseProcessor : process : Processed next premium due date (NEXT_PREM_DUE_DATE)  2020-12-02
2020-04-03 10:28:04 - Payment due date after process 2022-01-01
2020-04-03 10:28:04 - PaymentRaiseProcessor : process : Before process next prem due date 2020-11-02
2020-04-03 10:28:04 - PaymentRaiseProcessor : process : Before process final prem due date 2024-09-02
2020-04-03 10:28:04 - PaymentRaiseProcessor : process : Bacs code update to 17
2020-04-03 10:28:04 - PaymentRaiseProcessor : process : Processed next premium due date (NEXT_PREM_DUE_DATE)  2020-12-02
2020-04-03 10:28:04 - PaymentRaiseProcessor : process : Next payment due date (NEXT_PAYT_DUE_DATE) after process 2022-01-04
2020-04-03 10:28:04 - PaymentRaiseProcessor : paymentRaiseWdhFeed : premiumComponent.getPolicy() : YTKQYVN78O
2020-04-03 10:28:04 - PaymentRaiseProcessor : paymentRaiseWdhFeed : premiumComponent.getPolicy() : YTKQYVN78O
2020-04-03 10:28:04 - PaymentRaiseProcessor : paymentRaiseWdhFeed : Payment raise WDH feed diary event: DiaryEvent(diaryUid=null, policy=YTKQYVN78O, diaryType=RADATAFEEDUP, diaryTimestamp=2020-04-03 10:28:04.434, createdTimestamp=2020-04-03 10:28:04.434, diarySource=RAISEPAYMENT, diaryData={"policy":"YTKQYVN78O","updatedIndicator":"Y","nextPremiumDue":1606867200000,"dateNextDirectDebit":1641254400000,"outstandingMoneyDue":6.83,"currPrem":6.83}, status=00)
----------------------------------------------------------------------------------------------------------------
2020-04-03 10:28:04 - PartitionWorker : taskletProcessing :  LETS WRITE
2020-04-03 10:28:04 - PaymentRaiseWriterTasklet : execute
2020-04-03 10:28:04 - PaymentRaiseWriterTasklet : writePremiumDetail
2020-04-03 10:28:04 - PaymentRaiseWriterTasklet : writePremiumDetail : Executed paymentDetail writer PaymentDetail [paymentDetailUid=626425, policy=IMQAKSF6J3, bankDetailUid=6763, currentTimeStamp=2020-10-28 10:17:57.523, paymentReference=IMQAKSF6J3-201201, origPaymentSource=DD, policyMonthYear=2020-11-02, status=01, paymentAmount=6.83, paymentDueDate=2020-12-01, origCollectionDate=2020-12-01, actualCollection=null, actualPaymentSource=null, currency=GBP, bacsCode=17, commissionProcessedIndicator=N], generated key 628927
2020-04-03 10:28:04 - MQ sent to PTT-TRIGGER-QUEUE-NFT-PR
2020-04-03 10:28:04 - MQ sent to msg {"transactionType":"PD","collectionType":"DD","raisedDate":1603880277523,"dueDate":1604275200000,"collectionDate":1606780800000,"policy":"IMQAKSF6J3","paymentReference":"IMQAKSF6J3-201201","commissionType":null,"paymentAmount":6.83,"agentNumber":null,"paymentMonths":null}
2020-04-03 10:28:04 - PaymentRaiseWriterTasklet : writePremiumDetail : Data send to MQ{"transactionType":"PD","collectionType":"DD","raisedDate":1603880277523,"dueDate":1604275200000,"collectionDate":1606780800000,"policy":"IMQAKSF6J3","paymentReference":"IMQAKSF6J3-201201","commissionType":null,"paymentAmount":6.83,"agentNumber":null,"paymentMonths":null}
2020-04-03 10:28:04 - PaymentRaiseWriterTasklet : writePremiumComponent 
2020-04-03 10:28:04 - PaymentRaiseWriterTasklet : writePremiumComponent : lastPaymentUid 628927
2020-04-03 10:28:04 - PaymentRaiseWriterTasklet : writeDiaryEvent
..............................................................................................................
2020-04-03 10:32:17 - PaymentRaiseWriterTasklet : writePremiumDetail
2020-04-03 10:32:17 - PaymentRaiseWriterTasklet : writePremiumDetail : Executed paymentDetail writer PaymentDetail [paymentDetailUid=624543, policy=YTKQYVN78O, bankDetailUid=8887, currentTimeStamp=2020-10-28 10:28:04.433, paymentReference=YTKQYVN78O-201201, origPaymentSource=DD, policyMonthYear=2020-11-02, status=01, paymentAmount=6.83, paymentDueDate=2020-12-01, origCollectionDate=2020-12-01, actualCollection=null, actualPaymentSource=null, currency=GBP, bacsCode=17, commissionProcessedIndicator=N], generated key 630809
2020-04-03 10:32:17 - MQ sent to PTT-TRIGGER-QUEUE-NFT-PR
2020-04-03 10:32:17 - MQ sent to msg {"transactionType":"PD","collectionType":"DD","raisedDate":1603880884433,"dueDate":1604275200000,"collectionDate":1606780800000,"policy":"YTKQYVN78O","paymentReference":"YTKQYVN78O-201201","commissionType":null,"paymentAmount":6.83,"agentNumber":null,"paymentMonths":null}
2020-04-03 10:32:17 - PaymentRaiseWriterTasklet : writePremiumDetail : Data send to MQ{"transactionType":"PD","collectionType":"DD","raisedDate":1603880884433,"dueDate":1604275200000,"collectionDate":1606780800000,"policy":"YTKQYVN78O","paymentReference":"YTKQYVN78O-201201","commissionType":null,"paymentAmount":6.83,"agentNumber":null,"paymentMonths":null}
2020-04-03 10:32:17 - PaymentRaiseWriterTasklet : writePremiumComponent 
2020-04-03 10:32:17 - PaymentRaiseWriterTasklet : writePremiumComponent : lastPaymentUid 630809
2020-04-03 10:32:18 - PaymentRaiseWriterTasklet : writeDiaryEvent
2020-04-03 10:32:18 - PaymentRaiseWriterTasklet : execute : FINISHED
2020-04-03 10:32:18 - Previously reported leaked connection org.postgresql.jdbc.PgConnection@77fc4a89 on thread inboundFlow.org.springframework.jms.listener.DefaultMessageListenerContainer#0-1 was returned to the pool (unleaked)
2020-04-03 10:32:18 - Step: [paymentRaiseWorkerStep:partition2] executed in 14m21s148ms
----------------------------------------------------------------------------------------------------------------

